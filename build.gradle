plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.sdme'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def querydslVersion = '5.1.0'
def lombokVersion = '1.18.32'

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Querydsl
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def querydslGenerated = 'build/generated/querydsl'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslGenerated]
        }
    }
}

compileJava {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslGenerated)
}

// Querydsl Q 클래스 생성 Task
tasks.register('generateQuerydsl', JavaCompile) {
    description = "Generate Querydsl Q classes"
    group = "build"

    source = sourceSets.main.java.srcDirs
    classpath = configurations.annotationProcessor + configurations.compileClasspath
    destinationDir = file(querydslGenerated)
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslGenerated)
}

tasks.named('test') {
    useJUnitPlatform()
}
